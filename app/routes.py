from fastapi import APIRouter, HTTPException
from pydantic import BaseModel, Field
from typing import List, Dict, Any, Optional
from app.services.polygon_service import PolygonService
from app.models import *
import logging

logger = logging.getLogger(__name__)

router = APIRouter()
polygon_router = APIRouter(tags=["–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –ø–æ–ª–∏–≥–æ–Ω–∞ üó∫Ô∏è"])
cache_router = APIRouter(tags=["–†–∞–±–æ—Ç–∞ —Å –∫–µ—à–µ–º ‚öôÔ∏è"])
sheets_router = APIRouter(tags=["–†–∞–±–æ—Ç–∞ —Å –≥—É–≥–ª-—Ç–∞–±–ª–∏—Ü–∞–º–∏ üìö"])
polygon_service = PolygonService()


@router.get("/")
async def root():
    logger.info("Root endpoint accessed")
    return {"message": "GeoPolygon API - —Å–µ—Ä–≤–∏—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª–∏–≥–æ–Ω–æ–≤ –ø–æ–∫—Ä—ã—Ç–∏—è"}


@router.get("/health")
async def health_check():
    logger.debug("Health check endpoint accessed")
    return {"status": "healthy"}


@polygon_router.post("/polygon", response_model=PolygonResponse)
async def create_polygon(request: PointRequest):
    logger.info(f"Creating polygon for coordinates ({request.latitude}, {request.longitude}) with radius {request.radius}m")
    
    try:
        result = await polygon_service.create_polygon(
            lat=request.latitude,
            lon=request.longitude,
            radius_meters=request.radius
        )
        
        logger.info(f"Successfully created polygon with area {result['area']:.2f} m¬≤")
        
        return {
            "type": "Feature",
            "geometry": result["polygon"],
            "properties": {
                "center": [request.longitude, request.latitude],
                "radius": request.radius,
                "area_sqm": result["area"],
                "cached": result["cached"]
            }
        }
    except ValueError as e:
        logger.warning(f"Validation error: {e}")
        raise HTTPException(status_code=400, detail=str(e))
    except Exception as e:
        logger.error(f"Unexpected error creating polygon: {e}")
        raise HTTPException(status_code=500, detail="–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞")

@polygon_router.post('/perfomance-test')
async def stress_test(request: PointRequest):
    logger.info(f"Creating polygon for coordinates ({request.latitude}, {request.longitude}) with radius {request.radius}m")
    for i in range(0,20):
        await polygon_service.create_polygon(
            lat=request.latitude,
            lon=request.longitude,
            radius_meters=request.radius
        )
    return {"status": "ok", "message": f"–ë—ã–ª–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ 20 –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤"}
@sheets_router.post("/spreadsheet", response_model=SpreadsheetResponse)
async def create_spreadsheet():
    """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é Google —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤"""
    logger.info("Creating new Google Spreadsheet")
    
    spreadsheet_id = polygon_service.create_spreadsheet()
    if not spreadsheet_id:
        logger.error("Failed to create Google Spreadsheet")
        raise HTTPException(status_code=500, detail="–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å Google —Ç–∞–±–ª–∏—Ü—É")
    
    url = f"https://docs.google.com/spreadsheets/d/{spreadsheet_id}"
    logger.info(f"Successfully created Google Spreadsheet: {spreadsheet_id}")
    
    return SpreadsheetResponse(spreadsheet_id=spreadsheet_id, url=url)


@sheets_router.get("/spreadsheet/url")
async def get_spreadsheet_url():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç URL —Ç–µ–∫—É—â–µ–π Google —Ç–∞–±–ª–∏—Ü—ã"""
    logger.debug("Getting Google Spreadsheet URL")
    
    url = polygon_service.get_spreadsheet_url()
    if not url:
        logger.warning("Google Spreadsheet URL not found")
        raise HTTPException(status_code=404, detail="Google —Ç–∞–±–ª–∏—Ü–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞")
    
    return {"url": url}


@cache_router.get("/cache/stats", response_model=CacheStatsResponse)
async def get_cache_stats():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫—ç—à–∞"""
    logger.debug("Getting cache statistics")
    
    stats = polygon_service.get_cache_stats()
    return CacheStatsResponse(**stats)


@cache_router.delete("/cache")
async def clear_cache():
    """–û—á–∏—â–∞–µ—Ç –≤–µ—Å—å –∫—ç—à"""
    logger.info("Clearing cache")
    
    deleted_count = polygon_service.clear_cache()
    logger.info(f"Cleared {deleted_count} cache entries")
    
    return {"deleted_entries": deleted_count}


@cache_router.delete("/cache/entry")
async def delete_cache_entry(lat: float, lon: float, radius: float):
    """–£–¥–∞–ª—è–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –∑–∞–ø–∏—Å—å –∫—ç—à–∞"""
    logger.info(f"Deleting cache entry for coordinates ({lat}, {lon}) with radius {radius}m")
    
    success = polygon_service.cache_service.delete_cache_entry(lat, lon, radius)
    if not success:
        logger.warning(f"Cache entry not found for coordinates ({lat}, {lon}) with radius {radius}m")
        raise HTTPException(status_code=404, detail="–ó–∞–ø–∏—Å—å –∫—ç—à–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    
    return {"message": "Cache entry deleted successfully"}



